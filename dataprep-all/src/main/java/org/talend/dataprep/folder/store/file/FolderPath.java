// ============================================================================
// Copyright (C) 2006-2018 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// https://github.com/Talend/data-prep/blob/master/LICENSE
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================

package org.talend.dataprep.folder.store.file;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.talend.dataprep.folder.store.FoldersRepositoriesConstants.PATH_SEPARATOR;

import java.util.Arrays;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.talend.dataprep.folder.store.FoldersRepositoriesConstants;

import com.google.common.base.MoreObjects;

/**
 * Represents a {@link org.talend.dataprep.api.folder.Folder} business oriented path.
 * TODO: This should be used instead of String path.
 */
public class FolderPath {

    private final String[] path;

    public FolderPath(String... path) {
        this.path = Arrays.copyOf(path, path.length);
    }

    public FolderPath(FolderPath parent, String... path) {
        this.path = new String[parent.path.length + path.length];
        System.arraycopy(parent.path, 0, this.path, 0, parent.path.length);
        System.arraycopy(path, 0, this.path, parent.path.length, path.length);
    }

    public FolderPath getParent() {
        if (!isRoot()) {
            return new FolderPath(Arrays.copyOf(path, path.length - 1));
        }
        return this;
    }

    public boolean isRoot() {
        return path.length == 0;
    }

    public String getName() {
        String folderName;
        if (path.length > 0) {
            folderName = path[path.length - 1];
        } else {
            folderName = EMPTY;
        }
        return folderName;
    }

    public void setName(String newName) {
        if (!isRoot()) {
            path[path.length - 1] = newName;
        }
    }

    /**
     * Transform the path to a single String concatenation with {@link FoldersRepositoriesConstants#PATH_SEPARATOR PATH_SEPARATOR}.
     */
    public String serializeAsString() {
        return PATH_SEPARATOR + StringUtils.join(path, PATH_SEPARATOR);
    }

    /**
     * Read the String generated by {@link #serializeAsString()} back to a {@link FolderPath}.
     */
    public static FolderPath deserializeFromString(String pathAsString) {
        if (pathAsString == null) {
            return null;
        }
        return new FolderPath(ArrayUtils.removeElements(pathAsString.split(PATH_SEPARATOR.toString()), ""));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        FolderPath that = (FolderPath) o;
        return Arrays.equals(path, that.path);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(path);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this).add("path", Arrays.toString(path)).toString();
    }
}
